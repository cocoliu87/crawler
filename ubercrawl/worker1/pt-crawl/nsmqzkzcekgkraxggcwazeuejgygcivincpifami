nsmqzkzcekgkraxggcwazeuejgygcivincpifami length 6 171203 page 10102 Form of logic that allows quantification over predicates In logic and mathematics, second-order logic is an extension of first-order logic, which itself is an extension of propositional logic.[1] Second-order logic is in turn extended by higher-order logic and type theory. First-order logic quantifies only variables that range over individuals (elements of the domain of discourse); second-order logic, in addition, quantifies over relations. For example, the second-order sentence ∀ P ∀ x ( P x ∨ ¬ P x ) {\displaystyle \forall P\,\forall x(Px\lor \neg Px)} says that for every formula P, and every individual x, either Px is true or not(Px) is true (this is the law of excluded middle). Second-order logic also includes quantification over sets, functions, and other variables (see section below). Both first-order and second-order logic use the idea of a domain of discourse (often called simply the "domain" or the "universe"). The domain is a set over which individual elements may be quantified. Examples[edit] Graffiti in Neukölln (Berlin) showing the simplest second-order sentence admitting nontrivial models, "∃φ φ". First-order logic can quantify over individuals, but not over properties. That is, we can take an atomic sentence like Cube(b) and obtain a quantified sentence by replacing the name with a variable and attaching a quantifier:[2] ∃x Cube(x) However, we cannot do the same with the predicate. That is, the following expression ∃P P(b) is not a sentence of first-order logic, but this is a legitimate sentence of second-order logic. Here, P is a predicate variable and is semantically a set of individuals.[2] As a result, second-order logic has greater expressive power than first-order logic. For example, there is no way in first-order logic to identify the set of all cubes and tetrahedrons. But the existence of this set can be asserted in second-order logic as ∃P ∀x (Px ↔ (Cube(x) ∨ Tet(x))). We can then assert properties of this set. For instance, the following says that the set of all cubes and tetrahedrons does not contain any dodecahedrons: ∀P (∀x (Px ↔ (Cube(x) ∨ Tet(x))) → ¬ ∃x (Px ∧ Dodec(x))). Second-order quantification is especially useful because it gives the ability to express reachability properties. For example, if Parent(x, y) denotes that x is a parent of y, then first-order logic cannot express the property that x is an ancestor of y. In second-order logic we can express this by saying that every set of people containing y and closed under the Parent relation contains x: ∀P ((Py ∧ ∀a ∀b ((Pb ∧ Parent(a, b)) → Pa)) → Px). It is notable that while we have variables for predicates in second-order-logic, we don't have variables for properties of predicates. We cannot say, for example, that there is a property Shape(P) that is true for the predicates P Cube, Tet, and Dodec. This would require third-order logic.[3] Syntax and fragments[edit] The syntax of second-order logic tells which expressions are well formed formulas. In addition to the syntax of first-order logic, second-order logic includes many new sorts (sometimes called types) of variables. These are: A sort of variables that range over sets of individuals. If S is a variable of this sort and t is a first-order term then the expression t ∈ S (also written S(t), or St to save parentheses) is an atomic formula. Sets of individuals can also be viewed as unary relations on the domain. For each natural number k there is a sort of variables that ranges over all k-ary relations on the individuals. If R is such a k-ary relation variable and t1,...,tk are first-order terms then the expression R(t1,...,tk) is an atomic formula. For each natural number k there is a sort of variables that ranges over all functions taking k elements of the domain and returning a single element of the domain. If f is such a k-ary function variable and t1,...,tk are first-order terms then the expression f(t1,...,tk) is a first-order term. Each of the variables just defined may be universally and/or existentially quantified over, to build up formulas. Thus there are many kinds of quantifiers, two for each sort of variables. A sentence in second-order logic, as in first-order logic, is a well-formed formula with no free variables (of any sort). It's possible to forgo the introduction of function variables in the definition given above (and some authors do this) because an n-ary function variable can be represented by a relation variable of arity n+1 and an appropriate formula for the uniqueness of the "result" in the n+1 argument of the relation. (Shapiro 2000, p. 63) Monadic second-order logic (MSO) is a restriction of second-order logic in which only quantification over unary relations (i.e. sets) is allowed. Quantification over functions, owing to the equivalence to relations as described above, is thus also not allowed. The second-order logic without these restrictions is sometimes called full second-order logic to distinguish it from the monadic version. Monadic second-order logic is particularly used in the context of Courcelle's theorem, an algorithmic meta-theorem in graph theory. The MSO theory of the complete infinite binary tree (S2S) is decidable. By contrast, full second order logic over any infinite set (or MSO logic over for example ( N {\displaystyle \mathbb {N} } ,+)) can interpret the true second-order arithmetic. Just as in first-order logic, second-order logic may include non-logical symbols in a particular second-order language. These are restricted, however, in that all terms that they form must be either first-order terms (which can be substituted for a first-order variable) or second-order terms (which can be substituted for a second-order variable of an appropriate sort). A formula in second-order logic is said to be of first-order (and sometimes denoted Σ 0 1 {\displaystyle \Sigma _{0}^{1}} or Π 0 1 {\displaystyle \Pi _{0}^{1}} ) if its quantifiers (which may be universal or existential) range only over variables of first order, although it may have free variables of second order. A Σ 1 1 {\displaystyle \Sigma _{1}^{1}} (existential second-order) formula is one additionally having some existential quantifiers over second order variables, i.e. ∃ R 0 … ∃ R m ϕ {\displaystyle \exists R_{0}\ldots \exists R_{m}\phi } , where ϕ {\displaystyle \phi } is a first-order formula. The fragment of second-order logic consisting only of existential second-order formulas is called existential second-order logic and abbreviated as ESO, as Σ 1 1 {\displaystyle \Sigma _{1}^{1}} , or even as ∃SO. The fragment of Π 1 1 {\displaystyle \Pi _{1}^{1}} formulas is defined dually, it is called universal second-order logic. More expressive fragments are defined for any k > 0 by mutual recursion: Σ k + 1 1 {\displaystyle \Sigma _{k+1}^{1}} has the form ∃ R 0 … ∃ R m ϕ {\displaystyle \exists R_{0}\ldots \exists R_{m}\phi } , where ϕ {\displaystyle \phi } is a Π k 1 {\displaystyle \Pi _{k}^{1}} formula, and similar, Π k + 1 1 {\displaystyle \Pi _{k+1}^{1}} has the form ∀ R 0 … ∀ R m ϕ {\displaystyle \forall R_{0}\ldots \forall R_{m}\phi } , where ϕ {\displaystyle \phi } is a Σ k 1 {\displaystyle \Sigma _{k}^{1}} formula. (See analytical hierarchy for the analogous construction of second-order arithmetic.) Semantics[edit] The semantics of second-order logic establish the meaning of each sentence. Unlike first-order logic, which has only one standard semantics, there are two different semantics that are commonly used for second-order logic: standard semantics and Henkin semantics. In each of these semantics, the interpretations of the first-order quantifiers and the logical connectives are the same as in first-order logic. Only the ranges of quantifiers over second-order variables differ in the two types of semantics (Väänänen 2001). In standard semantics, also called full semantics, the quantifiers range over all sets or functions of the appropriate sort. Thus once the domain of the first-order variables is established, the meaning of the remaining quantifiers is fixed. It is these semantics that give second-order logic its expressive power, and they will be assumed for the remainder of this article. Leon Henkin (1950) defined an alternative kind of semantics for second-order and higher-order theories, in which the meaning of the higher-order domains is partly determined by an explicit axiomatisation, drawing on type theory, of the properties of the sets or functions ranged over. Henkin semantics is a kind of many-sorted first-order semantics, where there are a class of models of the axioms, instead of the semantics being fixed to just the standard model as in the standard semantics. A model in Henkin semantics will provide a set of sets or set of functions as the interpretation of higher-order domains, which may be a proper subset of all sets or functions of that sort. For his axiomatisation, Henkin proved that Gödel's completeness theorem and compactness theorem, which hold for first-order logic, carry over to second-order logic with Henkin semantics. Since also the Skolem–Löwenheim theorems hold for Henkin semantics, Lindström's theorem imports that Henkin models are just disguised first-order models.[4] For theories such as second-order arithmetic, the existence of non-standard interpretations of higher-order domains isn't just a deficiency of the particular axiomatisation derived from type theory that Henkin used, but a necessary consequence of Gödel's incompleteness theorem: Henkin's axioms can't be supplemented further to ensure the standard interpretation is the only possible model. Henkin semantics are commonly used in the study of second-order arithmetic. Jouko Väänänen (2001) argued that the choice between Henkin models and full models for second-order logic is analogous to the choice between ZFC and V as a basis for set theory: "As with second-order logic, we cannot really choose whether we axiomatize mathematics using V or ZFC. The result is the same in both cases, contentType 24 text/html; charset=UTF-8 url 52 https://en.wikipedia.org:443/wiki/Second-order_logic responseCode 3 200 