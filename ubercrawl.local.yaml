version: '3.4'
services:
  #
  # Proxy
  #
  ubercrawl-proxy-nginx:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '8000:8000' # KVS Coordinator
      # - '9000:9000' # Flame Coordinator
    environment:
      # Mysql/Maria connection parameters:
      DB_MYSQL_HOST: "ubercrawl-proxy-db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "npm"
      DB_MYSQL_NAME: "npm"
      # Uncomment this if IPv6 is not enabled on your host
      # DISABLE_IPV6: 'true'
    volumes:
      - ./data/proxy/data:/data
      - ./data/proxy/letsencrypt:/etc/letsencrypt
    depends_on:
      - ubercrawl-proxy-db
  ubercrawl-proxy-db:
    image: 'jc21/mariadb-aria:latest'
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 'npm'
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: 'npm'
    volumes:
      - ./data/proxy/mysql:/var/lib/mysql

  #
  # UberCrawl: Front-End
  #
  ubercrawl-frontend:
    build:
      context: frontend
      dockerfile: docker/frontend-build.dockerfile
    ports:
      - "8080:8080"
    restart: unless-stopped

  ubercrawl-api:
    image: sergiogcx/ubercrawl_base:main
    ports:
      - "8081:8081"
    volumes:
      - ./ubercrawl/static:/app/static
    restart: no
    command: [ "java", "-cp", "/java/lib/*", "cis5550.api.SearchAPI", "8081", "/app/static/MockData.json" ]

  #
  # UberCrawl: KVS & KVS Workers
  #
  kvs_coordinator:
    image: sergiogcx/ubercrawl_base:main
    ports:
      - "8000:8000"
    volumes:
      - ./data/coordinator:/app
    restart: no
    command: [ "java", "-cp", "/java/lib/*", "cis5550.kvs.Coordinator", "8000"]
  kvs_workers:
    image: sergiogcx/ubercrawl_base:main
    deploy:
      replicas: 5
    expose:
      - 8001
    restart: unless-stopped
    command: [ "java", "-cp", "/java/lib/*", "cis5550.kvs.Worker", "8001", "worker", "kvs_coordinator:8000"]
    depends_on:
    - kvs_coordinator

  #
  # UberCrawl: Flame & Flame Workers
  #
  flame_coordinator:
    image: sergiogcx/ubercrawl_base:main
    ports:
      - "9000:9000"
    volumes:
      - ./data/flame_coordinator:/app/
    restart: unless-stopped
    command: [ "java", "-cp", "/java/lib/*", "cis5550.flame.Coordinator", "9000", "kvs_coordinator:8000" ]
    depends_on:
      - kvs_coordinator

  #
  # Flame workers use the port as their ID,
  # unfortunately we must run several manually
  # because docker doesn't support variables.
  # There could be work-arounds, like running
  # these in a shell sequentially, or running
  # docker within docker.
  #
  flame_worker1: &flame_worker_template
    image: sergiogcx/ubercrawl_base:main
    restart: unless-stopped
    expose:
      - 9001
    command: [ "java", "-cp", "/java/lib/*", "cis5550.flame.Worker", "9001", "flame_coordinator:9000" ]
    depends_on:
      - flame_coordinator

  flame_worker2:
    <<: *flame_worker_template
    expose:
      - 9002
    command: [ "java", "-cp", "/java/lib/*", "cis5550.flame.Worker", "9002", "flame_coordinator:9000" ]

  flame_worker3:
    <<: *flame_worker_template
    expose:
      - 9003
    command: [ "java", "-cp", "/java/lib/*", "cis5550.flame.Worker", "9003", "flame_coordinator:9000" ]

  flame_worker4:
    <<: *flame_worker_template
    expose:
      - 9004
    command: [ "java", "-cp", "/java/lib/*", "cis5550.flame.Worker", "9004", "flame_coordinator:9000" ]

  flame_worker5:
    <<: *flame_worker_template
    expose:
      - 9005
    command: [ "java", "-cp", "/java/lib/*", "cis5550.flame.Worker", "9005", "flame_coordinator:9000" ]
